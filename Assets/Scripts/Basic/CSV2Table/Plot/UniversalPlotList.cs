// This code automatically generated by TableCodeGen

using System.Collections.Generic;
using Basic.CSV2Table.Scripts;
using UnityEngine;

namespace Basic.CSV2Table.Plot
{
    public class UniversalPlotList
    {
        public class Row
        {
            public string PlotId;
            public string StudentID;
            public string Money;
            public string SkillID;
            public string MusicID;
            public string SceneID;
            public string SoundID;
            public string ArticleID;
            public string ArticleNumber;
        }

        public UniversalPlotList(TextAsset csv)
        {
            Load(csv);
        }

        private List<Row> rowList = new();
        private bool isLoaded = false;

        public bool IsLoaded()
        {
            return isLoaded;
        }

        public List<Row> GetRowList()
        {
            return rowList;
        }

        public void Load(TextAsset csv)
        {
            rowList.Clear();
            var grid = CsvParser2.Parse(csv.text);
            for (var i = 1; i < grid.Length; i++)
            {
                var row = new Row();
                row.PlotId = grid[i][0];
                row.StudentID = grid[i][1];
                row.Money = grid[i][2];
                row.SkillID = grid[i][3];
                row.MusicID = grid[i][4];
                row.SceneID = grid[i][5];
                row.SoundID = grid[i][6];
                row.ArticleID = grid[i][7];
                row.ArticleNumber = grid[i][8];

                rowList.Add(row);
            }

            isLoaded = true;
        }

        public int Count()
        {
            return rowList.Count;
        }

        public Row this[int i] => rowList[i];

        public Row Find_PlotId(string find)
        {
            return rowList.Find(x => x.PlotId == find);
        }

        public List<Row> FindAll_PlotId(string find)
        {
            return rowList.FindAll(x => x.PlotId == find);
        }

        public Row Find_StudentID(string find)
        {
            return rowList.Find(x => x.StudentID == find);
        }

        public List<Row> FindAll_StudentID(string find)
        {
            return rowList.FindAll(x => x.StudentID == find);
        }

        public Row Find_Money(string find)
        {
            return rowList.Find(x => x.Money == find);
        }

        public List<Row> FindAll_Money(string find)
        {
            return rowList.FindAll(x => x.Money == find);
        }

        public Row Find_SkillID(string find)
        {
            return rowList.Find(x => x.SkillID == find);
        }

        public List<Row> FindAll_SkillID(string find)
        {
            return rowList.FindAll(x => x.SkillID == find);
        }

        public Row Find_MusicID(string find)
        {
            return rowList.Find(x => x.MusicID == find);
        }

        public List<Row> FindAll_MusicID(string find)
        {
            return rowList.FindAll(x => x.MusicID == find);
        }

        public Row Find_SceneID(string find)
        {
            return rowList.Find(x => x.SceneID == find);
        }

        public List<Row> FindAll_SceneID(string find)
        {
            return rowList.FindAll(x => x.SceneID == find);
        }

        public Row Find_SoundID(string find)
        {
            return rowList.Find(x => x.SoundID == find);
        }

        public List<Row> FindAll_SoundID(string find)
        {
            return rowList.FindAll(x => x.SoundID == find);
        }

        public Row Find_ArticleID(string find)
        {
            return rowList.Find(x => x.ArticleID == find);
        }

        public List<Row> FindAll_ArticleID(string find)
        {
            return rowList.FindAll(x => x.ArticleID == find);
        }

        public Row Find_ArticleNumber(string find)
        {
            return rowList.Find(x => x.ArticleNumber == find);
        }

        public List<Row> FindAll_ArticleNumber(string find)
        {
            return rowList.FindAll(x => x.ArticleNumber == find);
        }
    }
}